from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.area_of_interest import AreaOfInterest
from discovery_finder import util

from discovery_finder.models.area_of_interest import AreaOfInterest  # noqa: E501

class PutSubscriptionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_of_interest=None, time_start=None, time_end=None, sp_base_url=None):  # noqa: E501
        """PutSubscriptionParameters - a model defined in OpenAPI

        :param area_of_interest: The area_of_interest of this PutSubscriptionParameters.  # noqa: E501
        :type area_of_interest: AreaOfInterest
        :param time_start: The time_start of this PutSubscriptionParameters.  # noqa: E501
        :type time_start: datetime
        :param time_end: The time_end of this PutSubscriptionParameters.  # noqa: E501
        :type time_end: datetime
        :param sp_base_url: The sp_base_url of this PutSubscriptionParameters.  # noqa: E501
        :type sp_base_url: str
        """
        self.openapi_types = {
            'area_of_interest': AreaOfInterest,
            'time_start': datetime,
            'time_end': datetime,
            'sp_base_url': str
        }

        self.attribute_map = {
            'area_of_interest': 'area_of_interest',
            'time_start': 'time_start',
            'time_end': 'time_end',
            'sp_base_url': 'sp_base_url'
        }

        self._area_of_interest = area_of_interest
        self._time_start = time_start
        self._time_end = time_end
        self._sp_base_url = sp_base_url

    @classmethod
    def from_dict(cls, dikt) -> 'PutSubscriptionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PutSubscriptionParameters of this PutSubscriptionParameters.  # noqa: E501
        :rtype: PutSubscriptionParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_of_interest(self) -> AreaOfInterest:
        """Gets the area_of_interest of this PutSubscriptionParameters.


        :return: The area_of_interest of this PutSubscriptionParameters.
        :rtype: AreaOfInterest
        """
        return self._area_of_interest

    @area_of_interest.setter
    def area_of_interest(self, area_of_interest: AreaOfInterest):
        """Sets the area_of_interest of this PutSubscriptionParameters.


        :param area_of_interest: The area_of_interest of this PutSubscriptionParameters.
        :type area_of_interest: AreaOfInterest
        """
        if area_of_interest is None:
            raise ValueError("Invalid value for `area_of_interest`, must not be `None`")  # noqa: E501

        self._area_of_interest = area_of_interest

    @property
    def time_start(self) -> datetime:
        """Gets the time_start of this PutSubscriptionParameters.


        :return: The time_start of this PutSubscriptionParameters.
        :rtype: datetime
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start: datetime):
        """Sets the time_start of this PutSubscriptionParameters.


        :param time_start: The time_start of this PutSubscriptionParameters.
        :type time_start: datetime
        """
        if time_start is None:
            raise ValueError("Invalid value for `time_start`, must not be `None`")  # noqa: E501

        self._time_start = time_start

    @property
    def time_end(self) -> datetime:
        """Gets the time_end of this PutSubscriptionParameters.


        :return: The time_end of this PutSubscriptionParameters.
        :rtype: datetime
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end: datetime):
        """Sets the time_end of this PutSubscriptionParameters.


        :param time_end: The time_end of this PutSubscriptionParameters.
        :type time_end: datetime
        """
        if time_end is None:
            raise ValueError("Invalid value for `time_end`, must not be `None`")  # noqa: E501

        self._time_end = time_end

    @property
    def sp_base_url(self) -> str:
        """Gets the sp_base_url of this PutSubscriptionParameters.


        :return: The sp_base_url of this PutSubscriptionParameters.
        :rtype: str
        """
        return self._sp_base_url

    @sp_base_url.setter
    def sp_base_url(self, sp_base_url: str):
        """Sets the sp_base_url of this PutSubscriptionParameters.


        :param sp_base_url: The sp_base_url of this PutSubscriptionParameters.
        :type sp_base_url: str
        """
        if sp_base_url is None:
            raise ValueError("Invalid value for `sp_base_url`, must not be `None`")  # noqa: E501

        self._sp_base_url = sp_base_url
