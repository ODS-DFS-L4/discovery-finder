from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder import util


class AirwaySection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, airway_point_ids=None):  # noqa: E501
        """AirwaySection - a model defined in OpenAPI

        :param id: The id of this AirwaySection.  # noqa: E501
        :type id: str
        :param name: The name of this AirwaySection.  # noqa: E501
        :type name: str
        :param airway_point_ids: The airway_point_ids of this AirwaySection.  # noqa: E501
        :type airway_point_ids: List[str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'airway_point_ids': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'airway_point_ids': 'airway_point_ids'
        }

        self._id = id
        self._name = name
        self._airway_point_ids = airway_point_ids

    @classmethod
    def from_dict(cls, dikt) -> 'AirwaySection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AirwaySection of this AirwaySection.  # noqa: E501
        :rtype: AirwaySection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this AirwaySection.


        :return: The id of this AirwaySection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AirwaySection.


        :param id: The id of this AirwaySection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this AirwaySection.


        :return: The name of this AirwaySection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AirwaySection.


        :param name: The name of this AirwaySection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def airway_point_ids(self) -> List[str]:
        """Gets the airway_point_ids of this AirwaySection.


        :return: The airway_point_ids of this AirwaySection.
        :rtype: List[str]
        """
        return self._airway_point_ids

    @airway_point_ids.setter
    def airway_point_ids(self, airway_point_ids: List[str]):
        """Sets the airway_point_ids of this AirwaySection.


        :param airway_point_ids: The airway_point_ids of this AirwaySection.
        :type airway_point_ids: List[str]
        """
        if airway_point_ids is None:
            raise ValueError("Invalid value for `airway_point_ids`, must not be `None`")  # noqa: E501

        self._airway_point_ids = airway_point_ids
