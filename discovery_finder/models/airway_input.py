from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.single_airway_input import SingleAirwayInput
from discovery_finder import util

from discovery_finder.models.single_airway_input import SingleAirwayInput  # noqa: E501

class AirwayInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, administrator_id=None, business_number=None, airways=None, url=None):  # noqa: E501
        """AirwayInput - a model defined in OpenAPI

        :param administrator_id: The administrator_id of this AirwayInput.  # noqa: E501
        :type administrator_id: str
        :param business_number: The business_number of this AirwayInput.  # noqa: E501
        :type business_number: int
        :param airways: The airways of this AirwayInput.  # noqa: E501
        :type airways: List[SingleAirwayInput]
        :param url: The url of this AirwayInput.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'administrator_id': str,
            'business_number': int,
            'airways': List[SingleAirwayInput],
            'url': str
        }

        self.attribute_map = {
            'administrator_id': 'administrator_id',
            'business_number': 'business_number',
            'airways': 'airways',
            'url': 'url'
        }

        self._administrator_id = administrator_id
        self._business_number = business_number
        self._airways = airways
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'AirwayInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Airway-Input of this AirwayInput.  # noqa: E501
        :rtype: AirwayInput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def administrator_id(self) -> str:
        """Gets the administrator_id of this AirwayInput.


        :return: The administrator_id of this AirwayInput.
        :rtype: str
        """
        return self._administrator_id

    @administrator_id.setter
    def administrator_id(self, administrator_id: str):
        """Sets the administrator_id of this AirwayInput.


        :param administrator_id: The administrator_id of this AirwayInput.
        :type administrator_id: str
        """
        if administrator_id is None:
            raise ValueError("Invalid value for `administrator_id`, must not be `None`")  # noqa: E501

        self._administrator_id = administrator_id

    @property
    def business_number(self) -> int:
        """Gets the business_number of this AirwayInput.


        :return: The business_number of this AirwayInput.
        :rtype: int
        """
        return self._business_number

    @business_number.setter
    def business_number(self, business_number: int):
        """Sets the business_number of this AirwayInput.


        :param business_number: The business_number of this AirwayInput.
        :type business_number: int
        """
        if business_number is None:
            raise ValueError("Invalid value for `business_number`, must not be `None`")  # noqa: E501

        self._business_number = business_number

    @property
    def airways(self) -> List[SingleAirwayInput]:
        """Gets the airways of this AirwayInput.


        :return: The airways of this AirwayInput.
        :rtype: List[SingleAirwayInput]
        """
        return self._airways

    @airways.setter
    def airways(self, airways: List[SingleAirwayInput]):
        """Sets the airways of this AirwayInput.


        :param airways: The airways of this AirwayInput.
        :type airways: List[SingleAirwayInput]
        """
        if airways is None:
            raise ValueError("Invalid value for `airways`, must not be `None`")  # noqa: E501

        self._airways = airways

    @property
    def url(self) -> str:
        """Gets the url of this AirwayInput.


        :return: The url of this AirwayInput.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this AirwayInput.


        :param url: The url of this AirwayInput.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
