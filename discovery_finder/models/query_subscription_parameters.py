from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.area_of_interest import AreaOfInterest
from discovery_finder import util

from discovery_finder.models.area_of_interest import AreaOfInterest  # noqa: E501

class QuerySubscriptionParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area_of_interest=None):  # noqa: E501
        """QuerySubscriptionParameters - a model defined in OpenAPI

        :param area_of_interest: The area_of_interest of this QuerySubscriptionParameters.  # noqa: E501
        :type area_of_interest: AreaOfInterest
        """
        self.openapi_types = {
            'area_of_interest': AreaOfInterest
        }

        self.attribute_map = {
            'area_of_interest': 'area_of_interest'
        }

        self._area_of_interest = area_of_interest

    @classmethod
    def from_dict(cls, dikt) -> 'QuerySubscriptionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QuerySubscriptionParameters of this QuerySubscriptionParameters.  # noqa: E501
        :rtype: QuerySubscriptionParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area_of_interest(self) -> AreaOfInterest:
        """Gets the area_of_interest of this QuerySubscriptionParameters.


        :return: The area_of_interest of this QuerySubscriptionParameters.
        :rtype: AreaOfInterest
        """
        return self._area_of_interest

    @area_of_interest.setter
    def area_of_interest(self, area_of_interest: AreaOfInterest):
        """Sets the area_of_interest of this QuerySubscriptionParameters.


        :param area_of_interest: The area_of_interest of this QuerySubscriptionParameters.
        :type area_of_interest: AreaOfInterest
        """
        if area_of_interest is None:
            raise ValueError("Invalid value for `area_of_interest`, must not be `None`")  # noqa: E501

        self._area_of_interest = area_of_interest
