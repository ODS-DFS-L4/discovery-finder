from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.geometry import Geometry
from discovery_finder import util

from discovery_finder.models.geometry import Geometry  # noqa: E501

class AirwayGeometry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geometry=None):  # noqa: E501
        """AirwayGeometry - a model defined in OpenAPI

        :param geometry: The geometry of this AirwayGeometry.  # noqa: E501
        :type geometry: Geometry
        """
        self.openapi_types = {
            'geometry': Geometry
        }

        self.attribute_map = {
            'geometry': 'geometry'
        }

        self._geometry = geometry

    @classmethod
    def from_dict(cls, dikt) -> 'AirwayGeometry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AirwayGeometry of this AirwayGeometry.  # noqa: E501
        :rtype: AirwayGeometry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geometry(self) -> Geometry:
        """Gets the geometry of this AirwayGeometry.


        :return: The geometry of this AirwayGeometry.
        :rtype: Geometry
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry: Geometry):
        """Sets the geometry of this AirwayGeometry.


        :param geometry: The geometry of this AirwayGeometry.
        :type geometry: Geometry
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry
