from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.single_discovery_service_detail import SingleDiscoveryServiceDetail
from discovery_finder import util

from discovery_finder.models.single_discovery_service_detail import SingleDiscoveryServiceDetail  # noqa: E501

class DiscoveryServiceListRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_services=None):  # noqa: E501
        """DiscoveryServiceListRead - a model defined in OpenAPI

        :param available_services: The available_services of this DiscoveryServiceListRead.  # noqa: E501
        :type available_services: List[SingleDiscoveryServiceDetail]
        """
        self.openapi_types = {
            'available_services': List[SingleDiscoveryServiceDetail]
        }

        self.attribute_map = {
            'available_services': 'available_services'
        }

        self._available_services = available_services

    @classmethod
    def from_dict(cls, dikt) -> 'DiscoveryServiceListRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiscoveryServiceListRead of this DiscoveryServiceListRead.  # noqa: E501
        :rtype: DiscoveryServiceListRead
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_services(self) -> List[SingleDiscoveryServiceDetail]:
        """Gets the available_services of this DiscoveryServiceListRead.


        :return: The available_services of this DiscoveryServiceListRead.
        :rtype: List[SingleDiscoveryServiceDetail]
        """
        return self._available_services

    @available_services.setter
    def available_services(self, available_services: List[SingleDiscoveryServiceDetail]):
        """Sets the available_services of this DiscoveryServiceListRead.


        :param available_services: The available_services of this DiscoveryServiceListRead.
        :type available_services: List[SingleDiscoveryServiceDetail]
        """
        if available_services is None:
            raise ValueError("Invalid value for `available_services`, must not be `None`")  # noqa: E501

        self._available_services = available_services
