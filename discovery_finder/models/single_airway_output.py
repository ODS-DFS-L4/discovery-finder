from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.airway_junction_output import AirwayJunctionOutput
from discovery_finder.models.airway_section import AirwaySection
from discovery_finder import util

from discovery_finder.models.airway_junction_output import AirwayJunctionOutput  # noqa: E501
from discovery_finder.models.airway_section import AirwaySection  # noqa: E501

class SingleAirwayOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, junctions=None, sections=None):  # noqa: E501
        """SingleAirwayOutput - a model defined in OpenAPI

        :param id: The id of this SingleAirwayOutput.  # noqa: E501
        :type id: str
        :param name: The name of this SingleAirwayOutput.  # noqa: E501
        :type name: str
        :param junctions: The junctions of this SingleAirwayOutput.  # noqa: E501
        :type junctions: List[AirwayJunctionOutput]
        :param sections: The sections of this SingleAirwayOutput.  # noqa: E501
        :type sections: List[AirwaySection]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'junctions': List[AirwayJunctionOutput],
            'sections': List[AirwaySection]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'junctions': 'junctions',
            'sections': 'sections'
        }

        self._id = id
        self._name = name
        self._junctions = junctions
        self._sections = sections

    @classmethod
    def from_dict(cls, dikt) -> 'SingleAirwayOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SingleAirway-Output of this SingleAirwayOutput.  # noqa: E501
        :rtype: SingleAirwayOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this SingleAirwayOutput.


        :return: The id of this SingleAirwayOutput.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SingleAirwayOutput.


        :param id: The id of this SingleAirwayOutput.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SingleAirwayOutput.


        :return: The name of this SingleAirwayOutput.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SingleAirwayOutput.


        :param name: The name of this SingleAirwayOutput.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def junctions(self) -> List[AirwayJunctionOutput]:
        """Gets the junctions of this SingleAirwayOutput.


        :return: The junctions of this SingleAirwayOutput.
        :rtype: List[AirwayJunctionOutput]
        """
        return self._junctions

    @junctions.setter
    def junctions(self, junctions: List[AirwayJunctionOutput]):
        """Sets the junctions of this SingleAirwayOutput.


        :param junctions: The junctions of this SingleAirwayOutput.
        :type junctions: List[AirwayJunctionOutput]
        """
        if junctions is None:
            raise ValueError("Invalid value for `junctions`, must not be `None`")  # noqa: E501

        self._junctions = junctions

    @property
    def sections(self) -> List[AirwaySection]:
        """Gets the sections of this SingleAirwayOutput.


        :return: The sections of this SingleAirwayOutput.
        :rtype: List[AirwaySection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections: List[AirwaySection]):
        """Sets the sections of this SingleAirwayOutput.


        :param sections: The sections of this SingleAirwayOutput.
        :type sections: List[AirwaySection]
        """
        if sections is None:
            raise ValueError("Invalid value for `sections`, must not be `None`")  # noqa: E501

        self._sections = sections
