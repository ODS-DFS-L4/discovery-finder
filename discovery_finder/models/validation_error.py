from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.location_inner import LocationInner
from discovery_finder import util

from discovery_finder.models.location_inner import LocationInner  # noqa: E501

class ValidationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loc=None, msg=None, type=None):  # noqa: E501
        """ValidationError - a model defined in OpenAPI

        :param loc: The loc of this ValidationError.  # noqa: E501
        :type loc: List[LocationInner]
        :param msg: The msg of this ValidationError.  # noqa: E501
        :type msg: str
        :param type: The type of this ValidationError.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'loc': List[LocationInner],
            'msg': str,
            'type': str
        }

        self.attribute_map = {
            'loc': 'loc',
            'msg': 'msg',
            'type': 'type'
        }

        self._loc = loc
        self._msg = msg
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ValidationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValidationError of this ValidationError.  # noqa: E501
        :rtype: ValidationError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loc(self) -> List[LocationInner]:
        """Gets the loc of this ValidationError.


        :return: The loc of this ValidationError.
        :rtype: List[LocationInner]
        """
        return self._loc

    @loc.setter
    def loc(self, loc: List[LocationInner]):
        """Sets the loc of this ValidationError.


        :param loc: The loc of this ValidationError.
        :type loc: List[LocationInner]
        """
        if loc is None:
            raise ValueError("Invalid value for `loc`, must not be `None`")  # noqa: E501

        self._loc = loc

    @property
    def msg(self) -> str:
        """Gets the msg of this ValidationError.


        :return: The msg of this ValidationError.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg: str):
        """Sets the msg of this ValidationError.


        :param msg: The msg of this ValidationError.
        :type msg: str
        """
        if msg is None:
            raise ValueError("Invalid value for `msg`, must not be `None`")  # noqa: E501

        self._msg = msg

    @property
    def type(self) -> str:
        """Gets the type of this ValidationError.


        :return: The type of this ValidationError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ValidationError.


        :param type: The type of this ValidationError.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
