from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder import util


class SubscriptionBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, notification_index=None, sp_base_url=None, time_start=None, time_end=None):  # noqa: E501
        """SubscriptionBase - a model defined in OpenAPI

        :param version: The version of this SubscriptionBase.  # noqa: E501
        :type version: str
        :param notification_index: The notification_index of this SubscriptionBase.  # noqa: E501
        :type notification_index: int
        :param sp_base_url: The sp_base_url of this SubscriptionBase.  # noqa: E501
        :type sp_base_url: str
        :param time_start: The time_start of this SubscriptionBase.  # noqa: E501
        :type time_start: datetime
        :param time_end: The time_end of this SubscriptionBase.  # noqa: E501
        :type time_end: datetime
        """
        self.openapi_types = {
            'version': str,
            'notification_index': int,
            'sp_base_url': str,
            'time_start': datetime,
            'time_end': datetime
        }

        self.attribute_map = {
            'version': 'version',
            'notification_index': 'notification_index',
            'sp_base_url': 'sp_base_url',
            'time_start': 'time_start',
            'time_end': 'time_end'
        }

        self._version = version
        self._notification_index = notification_index
        self._sp_base_url = sp_base_url
        self._time_start = time_start
        self._time_end = time_end

    @classmethod
    def from_dict(cls, dikt) -> 'SubscriptionBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionBase of this SubscriptionBase.  # noqa: E501
        :rtype: SubscriptionBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this SubscriptionBase.


        :return: The version of this SubscriptionBase.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this SubscriptionBase.


        :param version: The version of this SubscriptionBase.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def notification_index(self) -> int:
        """Gets the notification_index of this SubscriptionBase.


        :return: The notification_index of this SubscriptionBase.
        :rtype: int
        """
        return self._notification_index

    @notification_index.setter
    def notification_index(self, notification_index: int):
        """Sets the notification_index of this SubscriptionBase.


        :param notification_index: The notification_index of this SubscriptionBase.
        :type notification_index: int
        """
        if notification_index is None:
            raise ValueError("Invalid value for `notification_index`, must not be `None`")  # noqa: E501

        self._notification_index = notification_index

    @property
    def sp_base_url(self) -> str:
        """Gets the sp_base_url of this SubscriptionBase.


        :return: The sp_base_url of this SubscriptionBase.
        :rtype: str
        """
        return self._sp_base_url

    @sp_base_url.setter
    def sp_base_url(self, sp_base_url: str):
        """Sets the sp_base_url of this SubscriptionBase.


        :param sp_base_url: The sp_base_url of this SubscriptionBase.
        :type sp_base_url: str
        """
        if sp_base_url is None:
            raise ValueError("Invalid value for `sp_base_url`, must not be `None`")  # noqa: E501

        self._sp_base_url = sp_base_url

    @property
    def time_start(self) -> datetime:
        """Gets the time_start of this SubscriptionBase.


        :return: The time_start of this SubscriptionBase.
        :rtype: datetime
        """
        return self._time_start

    @time_start.setter
    def time_start(self, time_start: datetime):
        """Sets the time_start of this SubscriptionBase.


        :param time_start: The time_start of this SubscriptionBase.
        :type time_start: datetime
        """
        if time_start is None:
            raise ValueError("Invalid value for `time_start`, must not be `None`")  # noqa: E501

        self._time_start = time_start

    @property
    def time_end(self) -> datetime:
        """Gets the time_end of this SubscriptionBase.


        :return: The time_end of this SubscriptionBase.
        :rtype: datetime
        """
        return self._time_end

    @time_end.setter
    def time_end(self, time_end: datetime):
        """Sets the time_end of this SubscriptionBase.


        :param time_end: The time_end of this SubscriptionBase.
        :type time_end: datetime
        """
        if time_end is None:
            raise ValueError("Invalid value for `time_end`, must not be `None`")  # noqa: E501

        self._time_end = time_end
