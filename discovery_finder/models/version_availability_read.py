from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder.models.availability_enum import AvailabilityEnum
from discovery_finder import util

from discovery_finder.models.availability_enum import AvailabilityEnum  # noqa: E501

class VersionAvailabilityRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, availability=None):  # noqa: E501
        """VersionAvailabilityRead - a model defined in OpenAPI

        :param version: The version of this VersionAvailabilityRead.  # noqa: E501
        :type version: str
        :param availability: The availability of this VersionAvailabilityRead.  # noqa: E501
        :type availability: AvailabilityEnum
        """
        self.openapi_types = {
            'version': str,
            'availability': AvailabilityEnum
        }

        self.attribute_map = {
            'version': 'version',
            'availability': 'availability'
        }

        self._version = version
        self._availability = availability

    @classmethod
    def from_dict(cls, dikt) -> 'VersionAvailabilityRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VersionAvailabilityRead of this VersionAvailabilityRead.  # noqa: E501
        :rtype: VersionAvailabilityRead
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this VersionAvailabilityRead.


        :return: The version of this VersionAvailabilityRead.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this VersionAvailabilityRead.


        :param version: The version of this VersionAvailabilityRead.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def availability(self) -> AvailabilityEnum:
        """Gets the availability of this VersionAvailabilityRead.


        :return: The availability of this VersionAvailabilityRead.
        :rtype: AvailabilityEnum
        """
        return self._availability

    @availability.setter
    def availability(self, availability: AvailabilityEnum):
        """Sets the availability of this VersionAvailabilityRead.


        :param availability: The availability of this VersionAvailabilityRead.
        :type availability: AvailabilityEnum
        """
        if availability is None:
            raise ValueError("Invalid value for `availability`, must not be `None`")  # noqa: E501

        self._availability = availability
