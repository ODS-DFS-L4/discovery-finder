from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from discovery_finder.models.base_model import Model
from discovery_finder import util


class BBoxDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, min_latitude=None, min_longitude=None, max_latitude=None, max_longitude=None):  # noqa: E501
        """BBoxDefinition - a model defined in OpenAPI

        :param min_latitude: The min_latitude of this BBoxDefinition.  # noqa: E501
        :type min_latitude: float
        :param min_longitude: The min_longitude of this BBoxDefinition.  # noqa: E501
        :type min_longitude: float
        :param max_latitude: The max_latitude of this BBoxDefinition.  # noqa: E501
        :type max_latitude: float
        :param max_longitude: The max_longitude of this BBoxDefinition.  # noqa: E501
        :type max_longitude: float
        """
        self.openapi_types = {
            'min_latitude': float,
            'min_longitude': float,
            'max_latitude': float,
            'max_longitude': float
        }

        self.attribute_map = {
            'min_latitude': 'min_latitude',
            'min_longitude': 'min_longitude',
            'max_latitude': 'max_latitude',
            'max_longitude': 'max_longitude'
        }

        self._min_latitude = min_latitude
        self._min_longitude = min_longitude
        self._max_latitude = max_latitude
        self._max_longitude = max_longitude

    @classmethod
    def from_dict(cls, dikt) -> 'BBoxDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BBoxDefinition of this BBoxDefinition.  # noqa: E501
        :rtype: BBoxDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def min_latitude(self) -> float:
        """Gets the min_latitude of this BBoxDefinition.


        :return: The min_latitude of this BBoxDefinition.
        :rtype: float
        """
        return self._min_latitude

    @min_latitude.setter
    def min_latitude(self, min_latitude: float):
        """Sets the min_latitude of this BBoxDefinition.


        :param min_latitude: The min_latitude of this BBoxDefinition.
        :type min_latitude: float
        """
        if min_latitude is None:
            raise ValueError("Invalid value for `min_latitude`, must not be `None`")  # noqa: E501
        if min_latitude is not None and min_latitude > 90:  # noqa: E501
            raise ValueError("Invalid value for `min_latitude`, must be a value less than or equal to `90`")  # noqa: E501
        if min_latitude is not None and min_latitude < -90:  # noqa: E501
            raise ValueError("Invalid value for `min_latitude`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._min_latitude = min_latitude

    @property
    def min_longitude(self) -> float:
        """Gets the min_longitude of this BBoxDefinition.


        :return: The min_longitude of this BBoxDefinition.
        :rtype: float
        """
        return self._min_longitude

    @min_longitude.setter
    def min_longitude(self, min_longitude: float):
        """Sets the min_longitude of this BBoxDefinition.


        :param min_longitude: The min_longitude of this BBoxDefinition.
        :type min_longitude: float
        """
        if min_longitude is None:
            raise ValueError("Invalid value for `min_longitude`, must not be `None`")  # noqa: E501
        if min_longitude is not None and min_longitude > 180:  # noqa: E501
            raise ValueError("Invalid value for `min_longitude`, must be a value less than or equal to `180`")  # noqa: E501
        if min_longitude is not None and min_longitude < -180:  # noqa: E501
            raise ValueError("Invalid value for `min_longitude`, must be a value greater than or equal to `-180`")  # noqa: E501

        self._min_longitude = min_longitude

    @property
    def max_latitude(self) -> float:
        """Gets the max_latitude of this BBoxDefinition.


        :return: The max_latitude of this BBoxDefinition.
        :rtype: float
        """
        return self._max_latitude

    @max_latitude.setter
    def max_latitude(self, max_latitude: float):
        """Sets the max_latitude of this BBoxDefinition.


        :param max_latitude: The max_latitude of this BBoxDefinition.
        :type max_latitude: float
        """
        if max_latitude is None:
            raise ValueError("Invalid value for `max_latitude`, must not be `None`")  # noqa: E501
        if max_latitude is not None and max_latitude > 90:  # noqa: E501
            raise ValueError("Invalid value for `max_latitude`, must be a value less than or equal to `90`")  # noqa: E501
        if max_latitude is not None and max_latitude < -90:  # noqa: E501
            raise ValueError("Invalid value for `max_latitude`, must be a value greater than or equal to `-90`")  # noqa: E501

        self._max_latitude = max_latitude

    @property
    def max_longitude(self) -> float:
        """Gets the max_longitude of this BBoxDefinition.


        :return: The max_longitude of this BBoxDefinition.
        :rtype: float
        """
        return self._max_longitude

    @max_longitude.setter
    def max_longitude(self, max_longitude: float):
        """Sets the max_longitude of this BBoxDefinition.


        :param max_longitude: The max_longitude of this BBoxDefinition.
        :type max_longitude: float
        """
        if max_longitude is None:
            raise ValueError("Invalid value for `max_longitude`, must not be `None`")  # noqa: E501
        if max_longitude is not None and max_longitude > 180:  # noqa: E501
            raise ValueError("Invalid value for `max_longitude`, must be a value less than or equal to `180`")  # noqa: E501
        if max_longitude is not None and max_longitude < -180:  # noqa: E501
            raise ValueError("Invalid value for `max_longitude`, must be a value greater than or equal to `-180`")  # noqa: E501

        self._max_longitude = max_longitude
